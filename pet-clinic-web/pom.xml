<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>  
	<parent>
		<groupId>guru.springframework5</groupId>
  		<artifactId>sfw5-bg-petclinic</artifactId>
		<version>0.0.3-SNAPSHOT</version>
	</parent>
	<artifactId>pet-clinic-web</artifactId>

	<properties>
		<!-- Web dependencies - FROM ORIGINAL PET CLINIC - Defines version for dependencies below -->
		<webjars-bootstrap.version>3.3.6</webjars-bootstrap.version>
		<webjars-jquery-ui.version>1.11.4</webjars-jquery-ui.version>
		<webjars-jquery.version>2.2.4</webjars-jquery.version>
		<wro4j.version>1.8.0</wro4j.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>guru.springframework5</groupId>
			<artifactId>pet-clinic-data</artifactId>
			<version>0.0.3-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>

		<!-- webjars FROM ORIGINAL PET CLINIC -->
 		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>webjars-locator-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery</artifactId>
			<version>${webjars-jquery.version}</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery-ui</artifactId>
			<version>${webjars-jquery-ui.version}</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>${webjars-bootstrap.version}</version>
		</dependency>
		<!-- end webjars -->

		<!-- TESTING with JUNIT (Spring Boot 2.2.0+ brings in JUnit 5 + Mockito, Spring Mock MVC test, etc.) -->
		<!-- JUnit 5 comes with JUnit Platform, JUnit Jupiter for JUnit 5, and JUnit Vintage if old tests (exclude if not) -->
		<!-- IF EARLIER SPRING BOOT (pre-2.2.0), need to <exclusion>junit (so removes default JUnit4) then include -->
		<!-- <dependency> for juit-jupiter-api, junit-jupiter-engine, mockito-junit-jupiter.   -->
		<!-- Again, our Spring Boot version gives by default so don't need to specify. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
			
				<exclusion>
				    <!-- WENT BACK TO PRE-SPRING BOOT 2.2.0 so need to manually remove JUNIT4 and include JUPITER (NEXT DEPENDENCY) -->
					<groupId>junit</groupId>
					<artifactId>junit-vintage-engine</artifactId>
					<!-- Without this get error - "TestEngine with ID 'junit-vintage' failed to discover tests." -->
				</exclusion>
			</exclusions>
		</dependency>
		
		<!-- WENT BACK TO PRE-SPRING BOOT 2.2.0 so need to manually include jupiter for JUNIT5  -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-junit-jupiter</artifactId>
			<!-- <versionn>2.22.0</versionn> -->
			<scope>test</scope>
		</dependency>
	</dependencies>

    <!-- Package as an executable jar -->
    <!-- Got error at <executions> if I did not include <pluginManagement> </pluginMangaement> right inside <build></build> -->
    <!-- Error was "Plugin execution not covered by lifecycle configuration ..." -->
	<build>
		<plugins>
			<!-- FROM ORIGINAL PET CLINIC for WRO plugin] so can generate CSS stylesheet needed by fragments from less stubs --> 
			<plugin>
				<groupId>ro.isdc.wro4j</groupId>
				<artifactId>wro4j-maven-plugin</artifactId>
				<version>${wro4j.version}</version>
				<executions>
					<execution>
						<phase>generate-resources</phase>
						<?m2e execute onConfiguration,onIncremental?>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
				
				<!-- $basedir is dir where pom is.  In this case pet clinic web pom. -->
				<!-- $project.build.directory also seems to be where pom is (for web it will be under petclinic web; for data, under data. -->
				<!--                          Therefore there are 2 classes directories.  -->
				<configuration>
					<wroManagerFactory>ro.isdc.wro.maven.plugin.manager.factory.ConfigurableWroManagerFactory</wroManagerFactory>
					<cssDestinationFolder>${project.build.directory}/classes/static/resources/css</cssDestinationFolder>
					<wroFile>${basedir}/src/main/wro/wro.xml</wroFile>
					<extraConfigFile>${basedir}/src/main/wro/wro.properties</extraConfigFile>
					<contextFolder>${basedir}/src/main/less</contextFolder>
				</configuration>

				<dependencies>
					<dependency>
						<groupId>org.webjars</groupId>
						<artifactId>bootstrap</artifactId>
						<version>${webjars-bootstrap.version}</version>
					</dependency>
					<dependency>
						<groupId>org.mockito</groupId>
						<artifactId>mockito-core</artifactId>
						<version>${mockito.version}</version>
						<!-- Need vsn 2.23.0 or higher to be updated for Java 9 or higher. Defaults to 3.1.0. --> 
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</build>
</project>